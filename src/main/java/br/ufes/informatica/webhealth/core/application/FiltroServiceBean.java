package br.ufes.informatica.webhealth.core.application;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.ufes.informatica.webhealth.core.domain.Doenca;
import br.ufes.informatica.webhealth.core.domain.Ocorrencia;
import br.ufes.informatica.webhealth.core.domain.Remedio;
import br.ufes.informatica.webhealth.core.domain.Sintoma;
import br.ufes.informatica.webhealth.core.persistence.OcorrenciaDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class FiltroServiceBean implements FiltroService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private OcorrenciaDAO ocorrenciaDAO;

	@Override
	public List<Ocorrencia> filtrarPorRemedios(List<Remedio> remedios, String cidade, String estado) {
		List<Ocorrencia> listaAux = new ArrayList();
		List<Ocorrencia> listaOcorrencias = new ArrayList();
		listaOcorrencias = ocorrenciaDAO.listarOcorrencias();
		for (Ocorrencia oc : listaAux) {
			if (oc.getPaciente().getEstado().equals(estado) && oc.getPaciente().getCidade().equals(cidade)) {
				for (Remedio remedioOcorrencia : remedios) {
					for (Remedio remedio : oc.getRemedios()) {
						if (remedioOcorrencia.getNomeRemedio().equals(remedio.getNomeRemedio())) {
							listaAux.add(oc);
						}
					}
				}
			}

		}

		return listaAux;

	}

	@Override
	public List<Ocorrencia> filtrarPorSintomas(List<Sintoma> sintomas, String cidade, String estado) {
		List<Ocorrencia> listaOcorrencias = new ArrayList();
		List<Ocorrencia> listaAux = new ArrayList();
		listaOcorrencias = ocorrenciaDAO.listarOcorrencias();
		if (listaOcorrencias != null) {
			for (Ocorrencia oc : listaOcorrencias) {
				if (oc.getPaciente().getEstado().equals(estado) && oc.getPaciente().getCidade().equals(cidade)) {
					for (Sintoma sint : sintomas) {
						for (Sintoma sintomaOc : oc.getSintomas()) {
							if (sint.getDescricaoSintoma().equals(sintomaOc.getDescricaoSintoma())) {
								listaAux.add(oc);
							}
						}
					}
				}
			}

		}
		return listaAux;
	}

	@Override
	public List<Ocorrencia> filtrarPorDoen√ßas(List<String> doencas, String cidade, String estado) {
		List<Ocorrencia> ocorrencias = ocorrenciaDAO.filtrar(doencas, cidade, estado);
		return ocorrencias;
	}

}