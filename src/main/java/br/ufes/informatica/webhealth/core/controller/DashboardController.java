package br.ufes.informatica.webhealth.core.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.enterprise.inject.*;
import javax.inject.Named;

import org.primefaces.model.DualListModel;
import org.primefaces.model.chart.Axis;
import org.primefaces.model.chart.AxisType;
import org.primefaces.model.chart.BarChartModel;
import org.primefaces.model.chart.CategoryAxis;
import org.primefaces.model.chart.ChartSeries;
import org.primefaces.model.chart.LineChartModel;
import org.primefaces.model.chart.PieChartModel;

import br.ufes.inf.nemo.jbutler.ejb.application.CrudService;
import br.ufes.inf.nemo.jbutler.ejb.controller.CrudController;
import br.ufes.informatica.webhealth.core.application.CadastroOcorrenciaService;
import br.ufes.informatica.webhealth.core.application.FiltroService;
import br.ufes.informatica.webhealth.core.domain.Doenca;
import br.ufes.informatica.webhealth.core.domain.Ocorrencia;
import br.ufes.informatica.webhealth.core.domain.Remedio;
import br.ufes.informatica.webhealth.core.domain.Sintoma;
import br.ufes.informatica.webhealth.core.persistence.DoencaDAO;
import br.ufes.informatica.webhealth.core.persistence.RemedioDAO;
import br.ufes.informatica.webhealth.core.persistence.SintomaDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Named
@SessionScoped
public class DashboardController extends CrudController<Ocorrencia> {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private FiltroService filtroService;
	@EJB
	private CadastroOcorrenciaService cadastroOcorrenciaService;
	@EJB
	private SintomaDAO sintomaDao;
	@EJB
	private DoencaDAO doencaDao;
	@EJB
	private RemedioDAO remedioDao;

	/** Váriaveis do filtro */
	/** TODO: generated by FrameWeb. Should be documented. */
	private List<Sintoma> sintomas;
	private List<Doenca> doencas;
	private List<Remedio> remedios;
	private String cidade;
	private String estado;
	private String nomeDoenca;
	private List<Sintoma> listaSintomas;
	private List<Doenca> listaDoencas;
	private List<Remedio> listaRemedios;

	/** Variáveis do gráficos */
	/** TODO: generated by FrameWeb. Should be documented. */
	private boolean showCharts = false;
	private boolean chartsError = false;
	private BarChartModel sintomasChart;
	private LineChartModel doencasChart;
	private PieChartModel remediosChart;

	@PostConstruct
	public void init() {
		this.showCharts = false;
		this.doencas = new ArrayList<Doenca>();
		this.sintomas = new ArrayList<Sintoma>();
		this.remedios = new ArrayList<Remedio>();
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	public String filtrar() {
		try {
			List<String> listaNomeDoencas = doencas.stream().map(d -> d.getNomeDoenca()).collect(Collectors.toList());
			List<Ocorrencia> ocorrenciasPorDoencas = filtroService.filtrarPorDoenças(listaNomeDoencas, cidade, estado);
			List<Ocorrencia> ocorrenciasPorRemedios = filtroService.filtrarPorRemedios(remedios, cidade, estado);
			List<Ocorrencia> ocorrenciasPorSintomas = filtroService.filtrarPorSintomas(sintomas, cidade, estado);
			this.doencasChart = criaChartLine(ocorrenciasPorDoencas);
			this.remediosChart = criaChartPie(ocorrenciasPorRemedios);
			this.sintomasChart = criaChartBar(ocorrenciasPorSintomas);
			this.showCharts = true;
			if (ocorrenciasPorSintomas.size() == 0 || ocorrenciasPorRemedios.size() == 0
					|| ocorrenciasPorDoencas.size() == 0) {
				setChartsError(true);
			} else {
				setChartsError(false);
			}
		} catch (Exception e) {
			setChartsError(true);
		}
		return "/core/dashboard/index?faces-redirect=true";
	}

	/** Getter for doencas. */
	public List<Doenca> getDoencas() {
		return doencas;
	}

	public boolean isShowCharts() {
		return showCharts;
	}

	public void setShowCharts(boolean showCharts) {
		this.showCharts = showCharts;
	}

	public void setRemedios(List<Remedio> remedios) {
		this.remedios = remedios;
	}

	/** Setter for doencas. */
	public void setDoencas(List<Doenca> doencas) {
		this.doencas = doencas;
	}

	/** Getter for sintomas. */
	public List<Sintoma> getSintomas() {
		return sintomas;
	}

	/** Setter for sintomas. */
	public void setSintomas(List<Sintoma> sintomas) {
		this.sintomas = sintomas;
	}

	/** Getter for remedios. */
	public List<Remedio> getRemedios() {
		return remedios;
	}

	/** Getter for cidade. */
	public String getCidade() {
		return cidade;
	}

	/** Setter for cidade. */
	public void setCidade(String cidade) {
		this.cidade = cidade;
	}

	/** Getter for estado. */
	public String getEstado() {
		return estado;
	}

	/** Setter for estado. */
	public void setEstado(String estado) {
		this.estado = estado;
	}

	/** Getter for nomeDoenca. */
	public String getNomeDoenca() {
		return nomeDoenca;
	}

	/** Setter for nomeDoenca. */
	public void setNomeDoenca(String nomeDoenca) {
		this.nomeDoenca = nomeDoenca;
	}

	/** Getter for sintomasChart. */
	public BarChartModel getSintomasChart() {
		return sintomasChart;
	}

	/** Setter for sintomasChart. */
	public void setSintomasChart(BarChartModel sintomasChart) {
		this.sintomasChart = sintomasChart;
	}

	/** Getter for tratamentoChart. */
	public LineChartModel getDoencasChart() {
		return doencasChart;
	}

	/** Setter for tratamentoChart. */
	public void setDoencasChart(LineChartModel doencasChart) {
		this.doencasChart = doencasChart;
	}

	/** Getter for remediosChart. */
	public PieChartModel getRemediosChart() {
		return remediosChart;
	}

	/** Setter for remediosChart. */
	public void setRemediosChart(PieChartModel remediosChart) {
		this.remediosChart = remediosChart;
	}

	public List<Sintoma> getListaSintomas() {
		if (listaSintomas == null) {
			listaSintomas = sintomaDao.retrieveAll();
		}
		return listaSintomas;
	}

	public void setListaSintomas(List<Sintoma> listaSintomas) {
		this.listaSintomas = listaSintomas;
	}

	public List<Remedio> getListaRemedios() {
		if (listaRemedios == null) {
			listaRemedios = remedioDao.retrieveAll();
		}
		return listaRemedios;
	}

	public void setListaRemedios(List<Remedio> listaRemedios) {
		this.listaRemedios = listaRemedios;
	}

	public List<Doenca> getListaDoencas() {
		if (listaDoencas == null) {
			listaDoencas = new ArrayList<Doenca>(doencaDao.retrieveAll());
		}
		return listaDoencas;
	}

	public void setListaDoencas(List<Doenca> listaDoencas) {
		this.listaDoencas = listaDoencas;
	}

	@Override
	protected CrudService<Ocorrencia> getCrudService() {
		// TODO Auto-generated method stub
		return cadastroOcorrenciaService;
	}

	@Override
	protected void initFilters() {
		// TODO Auto-generated method stub

	}

	public String filtro() {
		return "/core/dashboard/form?faces-redirect=true";
	}

	private LineChartModel criaChartLine(List<Ocorrencia> ocorrencias) {
		LineChartModel model = new LineChartModel();
		Map<String, Integer> serie = new HashMap();
		for (Ocorrencia ocorrencia : ocorrencias) {
			String nomeDoenca = ocorrencia.getDoenca().getNomeDoenca();
			if (serie.containsKey(ocorrencia.getDoenca().getNomeDoenca())) {
				Integer valor = serie.get(nomeDoenca) + 1;
				serie.replace(nomeDoenca, valor);

			} else {
				serie.put(nomeDoenca, 1);
			}
		}
		ChartSeries ocorrenciasChart = new ChartSeries();
		ocorrenciasChart.setLabel("Ocorrências");
		for (Map.Entry<String, Integer> doencas : serie.entrySet()) {
			ocorrenciasChart.set(doencas.getKey(), doencas.getValue());
		}

		model.addSeries(ocorrenciasChart);
		model.setTitle("Gráfico de Ocorrencias por Doenças");
		model.setLegendPosition("e");
		model.getAxes().put(AxisType.X, new CategoryAxis("Doenças"));
		Axis yAxis = model.getAxis(AxisType.Y);
		yAxis.setMin(0);
		yAxis.setLabel("Ocorrências");
		yAxis.setMax(ocorrencias.size());

		return model;
	}

	private PieChartModel criaChartPie(List<Ocorrencia> ocorrencias) {
		PieChartModel model = new PieChartModel();
		Map<String, Integer> serie = new HashMap();
		for (Ocorrencia ocorrencia : ocorrencias) {
			for (Remedio remedio : ocorrencia.getRemedios()) {
				for (Remedio remedio2 : remedios) {
					if (remedio2.getNomeRemedio().equals(remedio.getNomeRemedio())) {
						if (serie.containsKey(remedio.getNomeRemedio())) {

							Integer valor = serie.get(remedio.getNomeRemedio()) + 1;
							serie.replace(remedio.getNomeRemedio(), valor);
						} else {
							serie.put(remedio.getNomeRemedio(), 1);
						}
					}
				}

			}

		}
		for (Map.Entry<String, Integer> sintomas : serie.entrySet()) {
			model.set(sintomas.getKey(), sintomas.getValue());
		}

		model.setTitle("Gráfico de Ocorrencias por Remédios");
		model.setLegendPosition("w");
		model.setShadow(false);

		return model;
	}

	private BarChartModel criaChartBar(List<Ocorrencia> ocorrencias) {
		BarChartModel model = new BarChartModel();
		Map<String, Integer> serie = new HashMap();
		for (Ocorrencia ocorrencia : ocorrencias) {
			for (Sintoma sintoma : ocorrencia.getSintomas()) {
				for (Sintoma sintoma2 : sintomas) {
					if (sintoma.getDescricaoSintoma().equals(sintoma2.getDescricaoSintoma())) {
						if (serie.containsKey(sintoma.getDescricaoSintoma())) {
							Integer valor = serie.get(sintoma.getDescricaoSintoma()) + 1;
							serie.replace(sintoma.getDescricaoSintoma(), valor);
						} else {
							serie.put(sintoma.getDescricaoSintoma(), 1);
						}
					}
				}

			}

		}
		ChartSeries ocorrenciasChart = new ChartSeries();
		ocorrenciasChart.setLabel("Ocorrências");
		for (Map.Entry<String, Integer> sintomas : serie.entrySet()) {
			ocorrenciasChart.set(sintomas.getKey(), sintomas.getValue());
		}

		model.addSeries(ocorrenciasChart);
		model.setTitle("Gráfico de Ocorrencias por Sintomas");
		model.setLegendPosition("ne");
		Axis xAxis = model.getAxis(AxisType.X);
		xAxis.setLabel("Sintomas");

		Axis yAxis = model.getAxis(AxisType.Y);
		yAxis.setLabel("Ocorrências");
		yAxis.setMin(0);
		yAxis.setMax(ocorrencias.size());

		return model;
	}

	public boolean isChartsError() {
		return chartsError;
	}

	public void setChartsError(boolean chartsError) {
		this.chartsError = chartsError;
	}

}