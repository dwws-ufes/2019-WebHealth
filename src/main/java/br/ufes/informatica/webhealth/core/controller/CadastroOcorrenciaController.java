package br.ufes.informatica.webhealth.core.controller;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;

import org.primefaces.model.DualListModel;

import br.ufes.inf.nemo.jbutler.ejb.application.CrudService;
import br.ufes.inf.nemo.jbutler.ejb.controller.CrudController;
import br.ufes.informatica.webhealth.core.application.CadastroOcorrenciaService;
import br.ufes.informatica.webhealth.core.domain.Doenca;
import br.ufes.informatica.webhealth.core.domain.Ocorrencia;
import br.ufes.informatica.webhealth.core.domain.Paciente;
import br.ufes.informatica.webhealth.core.domain.Remedio;
import br.ufes.informatica.webhealth.core.domain.Sintoma;
import br.ufes.informatica.webhealth.core.persistence.DoencaDAO;
import br.ufes.informatica.webhealth.core.persistence.RemedioDAO;
import br.ufes.informatica.webhealth.core.persistence.SintomaDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Named
@SessionScoped
public class CadastroOcorrenciaController extends CrudController<Ocorrencia> {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private CadastroOcorrenciaService cadastroOcorrenciaService;
	@EJB
	private SintomaDAO sintomaDao;
	@EJB
	private DoencaDAO doencaDao;
	@EJB
	private RemedioDAO remedioDao;

	/** TODO: generated by FrameWeb. Should be documented. */
	private Ocorrencia ocorrencia;
	private DualListModel<Sintoma> listaSintomas;
	private List<Doenca> listaDoencas;
	private DualListModel<Remedio> listaRemedios;

	@PostConstruct
	public void init() {
		this.ocorrencia = new Ocorrencia();
	}

	/** Getter for ocorrencia. */
	public Ocorrencia getOcorrencia() {
		return ocorrencia;
	}

	/** Setter for ocorrencia. */
	public void setOcorrencia(Ocorrencia ocorrencia) {
		this.ocorrencia = ocorrencia;
	}

	@Override
	protected CrudService<Ocorrencia> getCrudService() {
		// TODO Auto-generated method stub
		return cadastroOcorrenciaService;
	}

	@Override
	protected void initFilters() {
		// TODO Auto-generated method stub

	}

	public DualListModel<Sintoma> getListaSintomas() {
		return listaSintomas;
	}

	public void setListaSintomas(DualListModel<Sintoma> listaSintomas) {
		this.listaSintomas = listaSintomas;
	}

	public DualListModel<Remedio> getListaRemedios() {
		return listaRemedios;
	}

	public void setListaRemedios(DualListModel<Remedio> listaRemedios) {
		this.listaRemedios = listaRemedios;
	}

	public List<Doenca> getListaDoencas() {
		if (listaDoencas == null) {
			listaDoencas = new ArrayList<Doenca>(doencaDao.retrieveAll());
		}
		return listaDoencas;
	}

	public void setListaDoencas(List<Doenca> listaDoencas) {
		this.listaDoencas = listaDoencas;
	}

	private void prepare() {
		List<Remedio> remedios = new ArrayList<Remedio>();
		if (this.selectedEntity != null) {
			remedios = new ArrayList<Remedio>(this.selectedEntity.getRemedios());
		}
		listaRemedios = new DualListModel<Remedio>(remedioDao.retrieveAll(), remedios);

		List<Sintoma> sintomas = new ArrayList<Sintoma>();
		if (this.selectedEntity != null) {
			sintomas = new ArrayList<Sintoma>(this.selectedEntity.getSintomas());
		}
		listaSintomas = new DualListModel<Sintoma>(sintomaDao.retrieveAll(), sintomas);

	}

	@Override
	protected void prepEntity() {
		super.prepEntity();
		this.selectedEntity.setSintomas(new HashSet<Sintoma>(listaSintomas.getTarget()));
		this.selectedEntity.setRemedios(new HashSet<Remedio>(listaRemedios.getTarget()));
	}

	@Override
	public String update() {
		// TODO Auto-generated method stub
		String redirect = super.update();
		this.prepare();
		return redirect;
	}

	@Override
	public String create() {
		// TODO Auto-generated method stub
		String redirect = super.create();
		this.prepare();
		return redirect;
	}
	
	@Override
	public String retrieve() {
		String redirect = super.create();
		this.prepare();
		return redirect;
	}

	protected Ocorrencia createNewEntity() {
		Ocorrencia ocorrencia = super.createNewEntity();
		ocorrencia.setPaciente((Paciente) getExternalContext().getSessionMap().get("paciente"));
		return ocorrencia;
	}
}