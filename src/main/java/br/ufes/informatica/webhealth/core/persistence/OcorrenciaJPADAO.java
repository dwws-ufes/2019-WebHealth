package br.ufes.informatica.webhealth.core.persistence;

import java.util.List;


import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ListJoin;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.webhealth.core.domain.Doenca;
import br.ufes.informatica.webhealth.core.domain.Ocorrencia;
import br.ufes.informatica.webhealth.core.domain.Ocorrencia_;
import br.ufes.informatica.webhealth.core.domain.Remedio;
import br.ufes.informatica.webhealth.core.domain.Sintoma;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class OcorrenciaJPADAO extends BaseJPADAO<Ocorrencia> implements OcorrenciaDAO {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@PersistenceContext
	private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}

	@Override
	public List<Ocorrencia> filtrar(List<String> doencas, String cidade, String estado) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ocorrencia> cq = cb.createQuery(Ocorrencia.class);
		Root<Ocorrencia> root = cq.from(Ocorrencia.class);
		Predicate p1 = root.get(Ocorrencia_.doenca).get("nomeDoenca").in(doencas);
		Predicate p2 = cb.equal( root.get(Ocorrencia_.paciente).get("cidade"),cidade);
		Predicate p3 = cb.equal( root.get(Ocorrencia_.paciente).get("estado"),estado);
		cq.where(p1,p2,p3);
		return entityManager.createQuery(cq).getResultList();
	
	}

	@Override
	public List<Ocorrencia> filtrarPorLocalizacao(String cidade, String estado) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ocorrencia> cq = cb.createQuery(Ocorrencia.class);
		Root<Ocorrencia> root = cq.from(Ocorrencia.class);
		root.join(Ocorrencia_.sintomas);
		root.join(Ocorrencia_.remedios);
		Predicate p1 = cb.equal( root.get(Ocorrencia_.paciente).get("cidade"),cidade);
		Predicate p2 = cb.equal( root.get(Ocorrencia_.paciente).get("estado"),estado);
		cq.select(root);
		cq.where(p1,p2);
		return entityManager.createQuery(cq).getResultList();
	}

}